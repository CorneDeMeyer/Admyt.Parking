@using Parking.FrontEnd.ClientService.Interface
@using Parking.FrontEnd.ClientService

@inject IGateClientService _gateClientService;

<h3>Create Gate Event</h3>

<form method="post" @onsubmit="Submit" FormName="GateEventHandler">
    <div>
        <label>
            Gate Id: @_gateId
        </label>
        <br />
        <label>
            Time: @_displayDate
        </label>
        <br />
        <label>
            Number Plate: 
            <input @bind-value="plateText" />
        </label>
        @if (errors != null && errors.Count > 0)
        {
            <div class="error-section">
                <ul>
                    @foreach (var error in errors)
                    {
                        <li>error</li>
                    }
                </ul>
            </div>
        }
        @if (responseGuid.HasValue)
        {
            <div class="result-section">
                <label>
                    Session Id: @responseGuid.Value
                </label>
            </div>
        }
        <br />
        <div>
            <button type="submit">Submit</button>
        </div>
    </div>
</form>

@code {
    // This will be a gate terminal
    private readonly Guid _gateId = Guid.Parse("7c3dc213-0203-488d-b65d-299b04d6f06c");
    private Guid? responseGuid = null;
    private List<string> errors = new();

    private string? _displayDate;
    private Timer? secondstimer;

    [SupplyParameterFromForm]
    public string plateText { get; set; } = "";

    private async Task Submit()
    {
        errors = new();
        responseGuid = null;
        if (plateText.Length > 1 && plateText.ValidLicensePlate())
        {
            var response = await _gateClientService.ProcessGateRequest(new Domain.Models.GateEvent
            {
                GateId = _gateId,
                TimeStamp = DateTime.UtcNow,
                PlateText = plateText
            });

            if (response.Errors.Count > 0)
            {
                errors = response.Errors;
            }
            else
            {
                responseGuid = response.Value;
            }
        }
        else
        {
            errors.Add($"License Plate {plateText} is not a valid License plate");
        }
    }

    protected override void OnInitialized()
    {
        _displayDate = DateTime.Now.ToString("hh:mm:ss tt");
    }
}
